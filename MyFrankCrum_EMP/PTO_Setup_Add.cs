///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The PTO_Setup_Add recording.
    /// </summary>
    [TestModule("e2fec8c3-442c-4895-9f55-f439488647a0", ModuleType.Recording, 1)]
    public partial class PTO_Setup_Add : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static PTO_Setup_Add instance = new PTO_Setup_Add();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public PTO_Setup_Add()
        {
            AccruedThruDate = "04/01/2021";
            PTOAllowed = "1200";
            LastOverRollDate = "04/12/2021";
            PTOTaken = "1000";
            PendingMovedDate = "04/18/2021";
            PTOPending = "140";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static PTO_Setup_Add Instance
        {
            get { return instance; }
        }

#region Variables

        string _AccruedThruDate;

        /// <summary>
        /// Gets or sets the value of variable AccruedThruDate.
        /// </summary>
        [TestVariable("4ffa31cd-ff93-4a68-807e-35d4cae7ded6")]
        public string AccruedThruDate
        {
            get { return _AccruedThruDate; }
            set { _AccruedThruDate = value; }
        }

        string _PTOAllowed;

        /// <summary>
        /// Gets or sets the value of variable PTOAllowed.
        /// </summary>
        [TestVariable("262d490c-4e72-48b7-af63-91e20c1ba147")]
        public string PTOAllowed
        {
            get { return _PTOAllowed; }
            set { _PTOAllowed = value; }
        }

        string _LastOverRollDate;

        /// <summary>
        /// Gets or sets the value of variable LastOverRollDate.
        /// </summary>
        [TestVariable("31978bd2-db19-4e91-8b8b-4fb6c432cde2")]
        public string LastOverRollDate
        {
            get { return _LastOverRollDate; }
            set { _LastOverRollDate = value; }
        }

        string _PTOTaken;

        /// <summary>
        /// Gets or sets the value of variable PTOTaken.
        /// </summary>
        [TestVariable("a9072600-6900-455d-81b6-711a98e175a7")]
        public string PTOTaken
        {
            get { return _PTOTaken; }
            set { _PTOTaken = value; }
        }

        string _PendingMovedDate;

        /// <summary>
        /// Gets or sets the value of variable PendingMovedDate.
        /// </summary>
        [TestVariable("2fa89f81-52fc-482c-91b6-9352af4e6734")]
        public string PendingMovedDate
        {
            get { return _PendingMovedDate; }
            set { _PendingMovedDate = value; }
        }

        string _PTOPending;

        /// <summary>
        /// Gets or sets the value of variable PTOPending.
        /// </summary>
        [TestVariable("83024183-1932-4ac7-ab45-e34b7e36b976")]
        public string PTOPending
        {
            get { return _PTOPending; }
            set { _PTOPending = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable RepoURL.
        /// </summary>
        [TestVariable("c75816bd-3150-4b49-aa6d-f8479454f515")]
        public string RepoURL
        {
            get { return repo.RepoURL; }
            set { repo.RepoURL = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AccruatTypeValue.
        /// </summary>
        [TestVariable("914e2351-f44c-4895-a856-23817ea3604f")]
        public string AccruatTypeValue
        {
            get { return repo.AccruatTypeValue; }
            set { repo.AccruatTypeValue = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AccuratOptionValue.
        /// </summary>
        [TestVariable("648f64ba-6b66-4574-b7e1-520f4f7920a4")]
        public string AccuratOptionValue
        {
            get { return repo.AccuratOptionValue; }
            set { repo.AccuratOptionValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOSetup' at Center.", repo.ApplicationUnderTest.PTOSetupInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.PTOSetup.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            // Press the Add PTO Plan button to the right if the Current PTO Plans label
            Report.Log(ReportLevel.Info, "Section", "Press the Add PTO Plan button to the right if the Current PTO Plans label", new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AddPTOPlan' at Center.", repo.ApplicationUnderTest.AddPTOPlanInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.AddPTOPlan.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(4));
            Delay.Duration(5000, false);
            
            // Fill out plan options and press Add PTO
            Report.Log(ReportLevel.Info, "Section", "Fill out plan options and press Add PTO", new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AccruatTypeclick' at Center.", repo.ApplicationUnderTest.AccruatTypeclickInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AccruatTypeclick.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AccruatTypeValue' at Center.", repo.ApplicationUnderTest.AccruatTypeValueInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.AccruatTypeValue.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AccruatOptionClick' at Center.", repo.ApplicationUnderTest.AccruatOptionClickInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.AccruatOptionClick.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AccruatOptionValue' at Center.", repo.ApplicationUnderTest.AccruatOptionValueInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.AccruatOptionValue.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AccruedThruDate' at Center.", repo.ApplicationUnderTest.AccruedThruDateInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.AccruedThruDate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AccruedThruDate' with focus on 'ApplicationUnderTest.AccruedThruDate'.", repo.ApplicationUnderTest.AccruedThruDateInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.AccruedThruDate.PressKeys(AccruedThruDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOAllowed' at Center.", repo.ApplicationUnderTest.PTOAllowedInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.PTOAllowed.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PTOAllowed' with focus on 'ApplicationUnderTest.PTOAllowed'.", repo.ApplicationUnderTest.PTOAllowedInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.PTOAllowed.PressKeys(PTOAllowed);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LastOverRollDate' at Center.", repo.ApplicationUnderTest.LastOverRollDateInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.LastOverRollDate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LastOverRollDate' with focus on 'ApplicationUnderTest.LastOverRollDate'.", repo.ApplicationUnderTest.LastOverRollDateInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.LastOverRollDate.PressKeys(LastOverRollDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOTaken' at Center.", repo.ApplicationUnderTest.PTOTakenInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.PTOTaken.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PTOTaken' with focus on 'ApplicationUnderTest.PTOTaken'.", repo.ApplicationUnderTest.PTOTakenInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.PTOTaken.PressKeys(PTOTaken);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PendingMovedDate' at Center.", repo.ApplicationUnderTest.PendingMovedDateInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.PendingMovedDate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PendingMovedDate' with focus on 'ApplicationUnderTest.PendingMovedDate'.", repo.ApplicationUnderTest.PendingMovedDateInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.PendingMovedDate.PressKeys(PendingMovedDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOPending' at Center.", repo.ApplicationUnderTest.PTOPendingInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.PTOPending.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PTOPending' with focus on 'ApplicationUnderTest.PTOPending'.", repo.ApplicationUnderTest.PTOPendingInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.PTOPending.PressKeys(PTOPending);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AddNewPTOPlan' at Center.", repo.ApplicationUnderTest.AddNewPTOPlanInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.AddNewPTOPlan.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(23));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After Added new PTO Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(24));
            
            // The PTO Plan is added. A new row is added to the Current PTO Plans list
            Report.Log(ReportLevel.Info, "Section", "The PTO Plan is added. A new row is added to the Current PTO Plans list", new RecordItemIndex(25));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LiTagPTO' at Center.", repo.ApplicationUnderTest.LiTagPTOInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.LiTagPTO.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(27));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Current PTO page added new PTO Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(28));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
