///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Change_History recording.
    /// </summary>
    [TestModule("af5c9a8f-c1ab-4a10-9827-813a785811e1", ModuleType.Recording, 1)]
    public partial class Change_History : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static Change_History instance = new Change_History();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Change_History()
        {
            EmployeeSearchName = "sapp";
            SearchFromDate = "11/01/2021";
            SearchToDate = "11/12/2021";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Change_History Instance
        {
            get { return instance; }
        }

#region Variables

        string _EmployeeSearchName;

        /// <summary>
        /// Gets or sets the value of variable EmployeeSearchName.
        /// </summary>
        [TestVariable("48d69084-660d-42cd-8a79-39ba9742e2ea")]
        public string EmployeeSearchName
        {
            get { return _EmployeeSearchName; }
            set { _EmployeeSearchName = value; }
        }

        string _SearchFromDate;

        /// <summary>
        /// Gets or sets the value of variable SearchFromDate.
        /// </summary>
        [TestVariable("7efddecd-a766-4ee6-9e92-5b16e25be41f")]
        public string SearchFromDate
        {
            get { return _SearchFromDate; }
            set { _SearchFromDate = value; }
        }

        string _SearchToDate;

        /// <summary>
        /// Gets or sets the value of variable SearchToDate.
        /// </summary>
        [TestVariable("91d7286b-16a7-4353-bb82-4af2dc35c374")]
        public string SearchToDate
        {
            get { return _SearchToDate; }
            set { _SearchToDate = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable RepoURL.
        /// </summary>
        [TestVariable("c75816bd-3150-4b49-aa6d-f8479454f515")]
        public string RepoURL
        {
            get { return repo.RepoURL; }
            set { repo.RepoURL = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ChangeHistory' at 27;7.", repo.ApplicationUnderTest.ChangeHistoryInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.ChangeHistory.Click("27;7");
            Delay.Milliseconds(0);
            
            // change the From Date and To Date
            Report.Log(ReportLevel.Info, "Section", "change the From Date and To Date", new RecordItemIndex(1));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BalanceViewContainer.Text' at 47;16.", repo.ApplicationUnderTest.BalanceViewContainer.TextInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.BalanceViewContainer.Text.Click("47;16");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SearchFromDate' with focus on 'ApplicationUnderTest.BalanceViewContainer.Text'.", repo.ApplicationUnderTest.BalanceViewContainer.TextInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.BalanceViewContainer.Text.PressKeys(SearchFromDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BalanceViewContainer.ToDateHistory' at 55;16.", repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistoryInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistory.Click("55;16");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SearchToDate' with focus on 'ApplicationUnderTest.BalanceViewContainer.ToDateHistory'.", repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistoryInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistory.PressKeys(SearchToDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{return}' with focus on 'ApplicationUnderTest.BalanceViewContainer.ToDateHistory'.", repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistoryInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.BalanceViewContainer.ToDateHistory.PressKeys("{return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(7));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After filtered From date , To date screenshot", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(8));
            
            // Select an employee from the employee filter
            Report.Log(ReportLevel.Info, "Section", "Select an employee from the employee filter", new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EmployeesearchText' at 240;11.", repo.ApplicationUnderTest.EmployeesearchTextInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.EmployeesearchText.Click("240;11");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EmployeeSearchName' with focus on 'ApplicationUnderTest.EmployeesearchText'.", repo.ApplicationUnderTest.EmployeesearchTextInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.EmployeesearchText.EnsureVisible();
            Keyboard.Press(EmployeeSearchName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.EmployeesearchText'.", repo.ApplicationUnderTest.EmployeesearchTextInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.EmployeesearchText.EnsureVisible();
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(13));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After filtered with Employee Name screenshot", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Reset2' at 17;10.", repo.ApplicationUnderTest.Reset2Info, new RecordItemIndex(15));
            repo.ApplicationUnderTest.Reset2.Click("17;10");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(16));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After reset the filter screenshot", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(17));
            
            // Press the PLUS symbol on the far right of one of the rows
            Report.Log(ReportLevel.Info, "Section", "Press the PLUS symbol on the far right of one of the rows", new RecordItemIndex(18));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFas' at 8;1.", repo.ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFasInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFas.Click("8;1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(20));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After PLUS symbol on the far right of one of the rows screenshot", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(21));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFas' at 8;1.", repo.ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFasInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.BalanceViewContainer.FaPlusCircleFas.Click("8;1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(23));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "After MINUS  symbol on the far right of one of the rows screenshot", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(24));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
