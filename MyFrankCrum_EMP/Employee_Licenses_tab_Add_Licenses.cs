///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Employee_Licenses_tab_Add_Licenses recording.
    /// </summary>
    [TestModule("b6eb1f4f-623e-4db9-8775-33b17fa61182", ModuleType.Recording, 1)]
    public partial class Employee_Licenses_tab_Add_Licenses : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static Employee_Licenses_tab_Add_Licenses instance = new Employee_Licenses_tab_Add_Licenses();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Employee_Licenses_tab_Add_Licenses()
        {
            LicenseNumber = "12345";
            LicenseIssueDate = "04/01/2020";
            LicenseExpirationDate = "04/01/2022";
            LicenseNotes = "Test";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Employee_Licenses_tab_Add_Licenses Instance
        {
            get { return instance; }
        }

#region Variables

        string _LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable LicenseNumber.
        /// </summary>
        [TestVariable("4554de70-1ee7-4b68-8736-b63cf36afb3d")]
        public string LicenseNumber
        {
            get { return _LicenseNumber; }
            set { _LicenseNumber = value; }
        }

        string _LicenseIssueDate;

        /// <summary>
        /// Gets or sets the value of variable LicenseIssueDate.
        /// </summary>
        [TestVariable("f857fd71-ef1c-400a-9d86-936ff15fa777")]
        public string LicenseIssueDate
        {
            get { return _LicenseIssueDate; }
            set { _LicenseIssueDate = value; }
        }

        string _LicenseExpirationDate;

        /// <summary>
        /// Gets or sets the value of variable LicenseExpirationDate.
        /// </summary>
        [TestVariable("29cbae39-63f7-45f9-920b-5d629e443056")]
        public string LicenseExpirationDate
        {
            get { return _LicenseExpirationDate; }
            set { _LicenseExpirationDate = value; }
        }

        string _LicenseNotes;

        /// <summary>
        /// Gets or sets the value of variable LicenseNotes.
        /// </summary>
        [TestVariable("53009bba-2bf8-4dff-bf16-60958f22bc90")]
        public string LicenseNotes
        {
            get { return _LicenseNotes; }
            set { _LicenseNotes = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable RepoURL.
        /// </summary>
        [TestVariable("c75816bd-3150-4b49-aa6d-f8479454f515")]
        public string RepoURL
        {
            get { return repo.RepoURL; }
            set { repo.RepoURL = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable LicenseDescriptionValue.
        /// </summary>
        [TestVariable("0cb4b840-1402-48f6-a74e-c987f83adac6")]
        public string LicenseDescriptionValue
        {
            get { return repo.LicenseDescriptionValue; }
            set { repo.LicenseDescriptionValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Licenses' at Center.", repo.ApplicationUnderTest.LicensesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Licenses.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            // Press the Add License button to the right of the Licenses label
            Report.Log(ReportLevel.Info, "Section", "Press the Add License button to the right of the Licenses label", new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicensesAddLicense' at Center.", repo.ApplicationUnderTest.LicensesAddLicenseInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.LicensesAddLicense.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseDescription' at Center.", repo.ApplicationUnderTest.LicenseDescriptionInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.LicenseDescription.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseDescriptionValue' at Center.", repo.ApplicationUnderTest.LicenseDescriptionValueInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.LicenseDescriptionValue.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseNumber' at Center.", repo.ApplicationUnderTest.LicenseNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.LicenseNumber.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LicenseNumber' with focus on 'ApplicationUnderTest.LicenseNumber'.", repo.ApplicationUnderTest.LicenseNumberInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.LicenseNumber.PressKeys(LicenseNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseIssuedate' at Center.", repo.ApplicationUnderTest.LicenseIssuedateInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.LicenseIssuedate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LicenseIssueDate' with focus on 'ApplicationUnderTest.LicenseIssuedate'.", repo.ApplicationUnderTest.LicenseIssuedateInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.LicenseIssuedate.PressKeys(LicenseIssueDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseExpirationdate' at Center.", repo.ApplicationUnderTest.LicenseExpirationdateInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.LicenseExpirationdate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LicenseExpirationDate' with focus on 'ApplicationUnderTest.LicenseExpirationdate'.", repo.ApplicationUnderTest.LicenseExpirationdateInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.LicenseExpirationdate.PressKeys(LicenseExpirationDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseNotes' at Center.", repo.ApplicationUnderTest.LicenseNotesInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.LicenseNotes.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LicenseNotes' with focus on 'ApplicationUnderTest.LicenseNotes'.", repo.ApplicationUnderTest.LicenseNotesInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.LicenseNotes.PressKeys(LicenseNotes);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicensesAddNewLicense' at Center.", repo.ApplicationUnderTest.LicensesAddNewLicenseInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.LicensesAddNewLicense.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(15));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(16));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
