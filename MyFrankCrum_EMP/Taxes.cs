///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Taxes recording.
    /// </summary>
    [TestModule("ff307b83-c641-485a-96a9-db5435539195", ModuleType.Recording, 1)]
    public partial class Taxes : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static Taxes instance = new Taxes();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Taxes()
        {
            Location = "006648 - A0F21-THS NATIONAL LLCVA";
            ChildrenAmount = "";
            OtherDependentsAmount = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Taxes Instance
        {
            get { return instance; }
        }

#region Variables

        string _ChildrenAmount;

        /// <summary>
        /// Gets or sets the value of variable ChildrenAmount.
        /// </summary>
        [TestVariable("f8e715ca-d120-439f-95db-ee6320666df4")]
        public string ChildrenAmount
        {
            get { return _ChildrenAmount; }
            set { _ChildrenAmount = value; }
        }

        string _OtherDependentsAmount;

        /// <summary>
        /// Gets or sets the value of variable OtherDependentsAmount.
        /// </summary>
        [TestVariable("e37ced54-55cf-437f-a7c8-6027023f4818")]
        public string OtherDependentsAmount
        {
            get { return _OtherDependentsAmount; }
            set { _OtherDependentsAmount = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Location.
        /// </summary>
        [TestVariable("8a960ec7-be01-42b6-8733-a8dffdb1cb27")]
        public string Location
        {
            get { return repo.Location; }
            set { repo.Location = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ReactTabsTabList.Taxes' at Center.", repo.ApplicationUnderTest.ReactTabsTabList.TaxesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.ReactTabsTabList.Taxes.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AddNewLocation' at Center.", repo.ApplicationUnderTest.AddNewLocationInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AddNewLocation.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AddLocationDropClick' at Center.", repo.ApplicationUnderTest.AddLocationDropClickInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.AddLocationDropClick.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LocationName' at Center.", repo.ApplicationUnderTest.LocationNameInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.LocationName.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.IsPrimary' at Center.", repo.ApplicationUnderTest.IsPrimaryInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.IsPrimary.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddLocation' at Center.", repo.AddLocationInfo, new RecordItemIndex(6));
            repo.AddLocation.Click();
            Delay.Milliseconds(0);
            
            // Two or more locations are needed for this test. Open the right side menu on one of the location rows that is NOT a primary location and press the Edit menu option
            Report.Log(ReportLevel.Info, "Section", "Two or more locations are needed for this test. Open the right side menu on one of the location rows that is NOT a primary location and press the Edit menu option", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TaxDropdownMenuButton' at Center.", repo.ApplicationUnderTest.TaxDropdownMenuButtonInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.TaxDropdownMenuButton.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Edit3' at Center.", repo.ApplicationUnderTest.Edit3Info, new RecordItemIndex(9));
            repo.ApplicationUnderTest.Edit3.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(10));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TaxesEditIsPrimary' at Center.", repo.TaxesEditIsPrimaryInfo, new RecordItemIndex(11));
            repo.TaxesEditIsPrimary.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TaxesEditSaveChanges' at Center.", repo.TaxesEditSaveChangesInfo, new RecordItemIndex(12));
            repo.TaxesEditSaveChanges.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(13));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(14));
            
            // Two or more locations are needed for this test. Open the right side menu on one of the location rows that is NOT a primary location and press the Activate/Deactivate menu option
            Report.Log(ReportLevel.Info, "Section", "Two or more locations are needed for this test. Open the right side menu on one of the location rows that is NOT a primary location and press the Activate/Deactivate menu option", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TaxDropdownMenuButton' at Center.", repo.ApplicationUnderTest.TaxDropdownMenuButtonInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.TaxDropdownMenuButton.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ActivateDeactivate' at Center.", repo.ApplicationUnderTest.ActivateDeactivateInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.ActivateDeactivate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(18));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(19));
            
            // Taxes
            Report.Log(ReportLevel.Info, "Section", "Taxes", new RecordItemIndex(20));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TaxesEdit' at .98;.611.", repo.ApplicationUnderTest.TaxesEditInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.TaxesEdit.Click(".98;.611");
            Delay.Milliseconds(0);
            
            // Change the dollar amounts in the fields but DON'T press Save Changes
            Report.Log(ReportLevel.Info, "Section", "Change the dollar amounts in the fields but DON'T press Save Changes", new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CHILDREN_UNDER' at Center.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.CHILDREN_UNDER.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Value' from item 'ApplicationUnderTest.CHILDREN_UNDER' and assigning its value to variable 'ChildrenAmount'.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(24));
            ChildrenAmount = repo.ApplicationUnderTest.CHILDREN_UNDER.Element.GetAttributeValueText("Value");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '3000' on item 'ApplicationUnderTest.CHILDREN_UNDER'.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.CHILDREN_UNDER.Element.SetAttributeValue("Value", "3000");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.OTHER_DEPENDENTS' at Center.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.OTHER_DEPENDENTS.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Value' from item 'ApplicationUnderTest.OTHER_DEPENDENTS' and assigning its value to variable 'OtherDependentsAmount'.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(27));
            OtherDependentsAmount = repo.ApplicationUnderTest.OTHER_DEPENDENTS.Element.GetAttributeValueText("Value");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '4000' on item 'ApplicationUnderTest.OTHER_DEPENDENTS'.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.OTHER_DEPENDENTS.Element.SetAttributeValue("Value", "4000");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TaxesUndoChanges1' at Center.", repo.TaxesUndoChanges1Info, new RecordItemIndex(29));
            repo.TaxesUndoChanges1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$OtherDependentsAmount) on item 'ApplicationUnderTest.OTHER_DEPENDENTS'.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(30));
            Validate.AttributeEqual(repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, "Value", OtherDependentsAmount);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$ChildrenAmount) on item 'ApplicationUnderTest.CHILDREN_UNDER'.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(31));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CHILDREN_UNDERInfo, "Value", ChildrenAmount);
            Delay.Milliseconds(100);
            
            // Change the dollar amounts of the fields and press Save Changes
            Report.Log(ReportLevel.Info, "Section", "Change the dollar amounts of the fields and press Save Changes", new RecordItemIndex(32));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CHILDREN_UNDER' at Center.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(33));
            repo.ApplicationUnderTest.CHILDREN_UNDER.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '6000' on item 'ApplicationUnderTest.CHILDREN_UNDER'.", repo.ApplicationUnderTest.CHILDREN_UNDERInfo, new RecordItemIndex(34));
            repo.ApplicationUnderTest.CHILDREN_UNDER.Element.SetAttributeValue("Value", "6000");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.OTHER_DEPENDENTS' at Center.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(35));
            repo.ApplicationUnderTest.OTHER_DEPENDENTS.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '6000' on item 'ApplicationUnderTest.OTHER_DEPENDENTS'.", repo.ApplicationUnderTest.OTHER_DEPENDENTSInfo, new RecordItemIndex(36));
            repo.ApplicationUnderTest.OTHER_DEPENDENTS.Element.SetAttributeValue("Value", "6000");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TaxesEditSaveChanges3' at Center.", repo.TaxesEditSaveChanges3Info, new RecordItemIndex(37));
            repo.TaxesEditSaveChanges3.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(38));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(39));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
