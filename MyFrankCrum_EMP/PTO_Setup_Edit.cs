///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The PTO_Setup_Edit recording.
    /// </summary>
    [TestModule("ae2d9552-aca9-4b62-9d01-294143173483", ModuleType.Recording, 1)]
    public partial class PTO_Setup_Edit : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static PTO_Setup_Edit instance = new PTO_Setup_Edit();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public PTO_Setup_Edit()
        {
            GetPTOAllowedValue = "";
            GetPTOTakenValue = "";
            EditPTOAllowed = "1400";
            EditPTOTaken = "1000";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static PTO_Setup_Edit Instance
        {
            get { return instance; }
        }

#region Variables

        string _GetPTOAllowedValue;

        /// <summary>
        /// Gets or sets the value of variable GetPTOAllowedValue.
        /// </summary>
        [TestVariable("e7c39933-e0d7-456e-8538-049c1b798b59")]
        public string GetPTOAllowedValue
        {
            get { return _GetPTOAllowedValue; }
            set { _GetPTOAllowedValue = value; }
        }

        string _GetPTOTakenValue;

        /// <summary>
        /// Gets or sets the value of variable GetPTOTakenValue.
        /// </summary>
        [TestVariable("4c051979-ad77-4825-b8d9-97168ae337f9")]
        public string GetPTOTakenValue
        {
            get { return _GetPTOTakenValue; }
            set { _GetPTOTakenValue = value; }
        }

        string _EditPTOAllowed;

        /// <summary>
        /// Gets or sets the value of variable EditPTOAllowed.
        /// </summary>
        [TestVariable("e956cf88-16e6-4c84-bc58-3c48073bc9ab")]
        public string EditPTOAllowed
        {
            get { return _EditPTOAllowed; }
            set { _EditPTOAllowed = value; }
        }

        string _EditPTOTaken;

        /// <summary>
        /// Gets or sets the value of variable EditPTOTaken.
        /// </summary>
        [TestVariable("5bb32c23-7f76-402e-991a-c34f80d7ac8b")]
        public string EditPTOTaken
        {
            get { return _EditPTOTaken; }
            set { _EditPTOTaken = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable RepoURL.
        /// </summary>
        [TestVariable("c75816bd-3150-4b49-aa6d-f8479454f515")]
        public string RepoURL
        {
            get { return repo.RepoURL; }
            set { repo.RepoURL = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Click Edit in the menu on the right side of the Current PTO Plan row
            Report.Log(ReportLevel.Info, "Section", "Click Edit in the menu on the right side of the Current PTO Plan row", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOSetup' at Center.", repo.ApplicationUnderTest.PTOSetupInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.PTOSetup.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(2));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTODropdownMenuButton' at Center.", repo.ApplicationUnderTest.PTODropdownMenuButtonInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.PTODropdownMenuButton.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOEdit' at Center.", repo.ApplicationUnderTest.PTOEditInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.PTOEdit.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditPTOAllowed' at Center.", repo.ApplicationUnderTest.EditPTOAllowedInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.EditPTOAllowed.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Value' from item 'ApplicationUnderTest.EditPTOAllowed' and assigning its value to variable 'GetPTOAllowedValue'.", repo.ApplicationUnderTest.EditPTOAllowedInfo, new RecordItemIndex(7));
            GetPTOAllowedValue = repo.ApplicationUnderTest.EditPTOAllowed.Element.GetAttributeValueText("Value");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$EditPTOAllowed' on item 'ApplicationUnderTest.EditPTOAllowed'.", repo.ApplicationUnderTest.EditPTOAllowedInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.EditPTOAllowed.Element.SetAttributeValue("Value", EditPTOAllowed);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditPTOTaken' at Center.", repo.ApplicationUnderTest.EditPTOTakenInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.EditPTOTaken.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Value' from item 'ApplicationUnderTest.EditPTOTaken' and assigning its value to variable 'GetPTOTakenValue'.", repo.ApplicationUnderTest.EditPTOTakenInfo, new RecordItemIndex(10));
            GetPTOTakenValue = repo.ApplicationUnderTest.EditPTOTaken.Element.GetAttributeValueText("Value");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$EditPTOTaken' on item 'ApplicationUnderTest.EditPTOTaken'.", repo.ApplicationUnderTest.EditPTOTakenInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.EditPTOTaken.Element.SetAttributeValue("Value", EditPTOTaken);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PTOUndoChanges' at Center.", repo.ApplicationUnderTest.PTOUndoChangesInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.PTOUndoChanges.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$GetPTOAllowedValue) on item 'ApplicationUnderTest.PTOAllowed'.", repo.ApplicationUnderTest.PTOAllowedInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.PTOAllowedInfo, "Value", GetPTOAllowedValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$GetPTOTakenValue) on item 'ApplicationUnderTest.PTOTaken'.", repo.ApplicationUnderTest.PTOTakenInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.ApplicationUnderTest.PTOTakenInfo, "Value", GetPTOTakenValue);
            Delay.Milliseconds(100);
            
            // Make another change. Press Save Changes
            Report.Log(ReportLevel.Info, "Section", "Make another change. Press Save Changes", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditPTOAllowed' at Center.", repo.ApplicationUnderTest.EditPTOAllowedInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.EditPTOAllowed.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$EditPTOAllowed' on item 'ApplicationUnderTest.EditPTOAllowed'.", repo.ApplicationUnderTest.EditPTOAllowedInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.EditPTOAllowed.Element.SetAttributeValue("Value", EditPTOAllowed);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditPTOTaken' at Center.", repo.ApplicationUnderTest.EditPTOTakenInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.EditPTOTaken.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$EditPTOTaken' on item 'ApplicationUnderTest.EditPTOTaken'.", repo.ApplicationUnderTest.EditPTOTakenInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.EditPTOTaken.Element.SetAttributeValue("Value", EditPTOTaken);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditSavePTOPlan' at Center.", repo.ApplicationUnderTest.EditSavePTOPlanInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.EditSavePTOPlan.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(21));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Screenshot Taken", repo.ApplicationUnderTest.Self, false, new RecordItemIndex(22));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
