///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyFrankCrum_EMP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Personal_Tab_Info recording.
    /// </summary>
    [TestModule("fca94505-975b-4122-8879-fab8c68b1539", ModuleType.Recording, 1)]
    public partial class Personal_Tab_Info : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyFrankCrum_EMPRepository repository.
        /// </summary>
        public static MyFrankCrum_EMPRepository repo = MyFrankCrum_EMPRepository.Instance;

        static Personal_Tab_Info instance = new Personal_Tab_Info();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Personal_Tab_Info()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Personal_Tab_Info Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='FIRST NAME') on item 'ApplicationUnderTest.FirstNamelbl'.", repo.ApplicationUnderTest.FirstNamelblInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.ApplicationUnderTest.FirstNamelblInfo, "InnerText", "FIRST NAME");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='MIDDLE NAME') on item 'ApplicationUnderTest.MIDDLENAME'.", repo.ApplicationUnderTest.MIDDLENAMEInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ApplicationUnderTest.MIDDLENAMEInfo, "InnerText", "MIDDLE NAME");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='LAST NAME') on item 'ApplicationUnderTest.LASTNAME'.", repo.ApplicationUnderTest.LASTNAMEInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LASTNAMEInfo, "InnerText", "LAST NAME");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='SUFFIX') on item 'ApplicationUnderTest.SUFFIX'.", repo.ApplicationUnderTest.SUFFIXInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.SUFFIXInfo, "InnerText", "SUFFIX");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='BIRTH DATE') on item 'ApplicationUnderTest.BIRTHDATE'.", repo.ApplicationUnderTest.BIRTHDATEInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.BIRTHDATEInfo, "InnerText", "BIRTH DATE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='ETHNIC ID') on item 'ApplicationUnderTest.ETHNICID'.", repo.ApplicationUnderTest.ETHNICIDInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ETHNICIDInfo, "InnerText", "ETHNIC ID");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='GENDER') on item 'ApplicationUnderTest.GENDER'.", repo.ApplicationUnderTest.GENDERInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.GENDERInfo, "InnerText", "GENDER");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='MARITAL STATUS') on item 'ApplicationUnderTest.MARITALSTATUS'.", repo.ApplicationUnderTest.MARITALSTATUSInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.MARITALSTATUSInfo, "InnerText", "MARITAL STATUS");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='ADDRESS LINE 1') on item 'ApplicationUnderTest.ADDRESSLINE1'.", repo.ApplicationUnderTest.ADDRESSLINE1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ADDRESSLINE1Info, "InnerText", "ADDRESS LINE 1");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='ADDRESS LINE 2') on item 'ApplicationUnderTest.ADDRESSLINE2'.", repo.ApplicationUnderTest.ADDRESSLINE2Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ADDRESSLINE2Info, "InnerText", "ADDRESS LINE 2");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='CITY') on item 'ApplicationUnderTest.CITY'.", repo.ApplicationUnderTest.CITYInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CITYInfo, "InnerText", "CITY");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='STATE') on item 'ApplicationUnderTest.STATE'.", repo.ApplicationUnderTest.STATEInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.STATEInfo, "InnerText", "STATE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='ZIP CODE') on item 'ApplicationUnderTest.ZIPCODE'.", repo.ApplicationUnderTest.ZIPCODEInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ZIPCODEInfo, "InnerText", "ZIP CODE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='HOME EMAIL') on item 'ApplicationUnderTest.HOMEEMAIL'.", repo.ApplicationUnderTest.HOMEEMAILInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HOMEEMAILInfo, "InnerText", "HOME EMAIL");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='HOME PHONE') on item 'ApplicationUnderTest.HOMEPHONE'.", repo.ApplicationUnderTest.HOMEPHONEInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HOMEPHONEInfo, "InnerText", "HOME PHONE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='PERSONAL MOBILE') on item 'ApplicationUnderTest.PERSONALMOBILE'.", repo.ApplicationUnderTest.PERSONALMOBILEInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ApplicationUnderTest.PERSONALMOBILEInfo, "InnerText", "PERSONAL MOBILE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='WORK EMAIL') on item 'ApplicationUnderTest.WORKEMAIL'.", repo.ApplicationUnderTest.WORKEMAILInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.ApplicationUnderTest.WORKEMAILInfo, "InnerText", "WORK EMAIL");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='WORK PHONE') on item 'ApplicationUnderTest.WORKPHONE'.", repo.ApplicationUnderTest.WORKPHONEInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.ApplicationUnderTest.WORKPHONEInfo, "InnerText", "WORK PHONE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='WORK EXTENSION') on item 'ApplicationUnderTest.WORKEXTENSION'.", repo.ApplicationUnderTest.WORKEXTENSIONInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.ApplicationUnderTest.WORKEXTENSIONInfo, "InnerText", "WORK EXTENSION");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='WORK MOBILE') on item 'ApplicationUnderTest.WORKMOBILE'.", repo.ApplicationUnderTest.WORKMOBILEInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.ApplicationUnderTest.WORKMOBILEInfo, "InnerText", "WORK MOBILE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='OTHER PHONE') on item 'ApplicationUnderTest.OTHERPHONE'.", repo.ApplicationUnderTest.OTHERPHONEInfo, new RecordItemIndex(20));
            Validate.AttributeEqual(repo.ApplicationUnderTest.OTHERPHONEInfo, "InnerText", "OTHER PHONE");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (InnerText>'Contacts') on item 'ApplicationUnderTest.ContactsLabel'.", repo.ApplicationUnderTest.ContactsLabelInfo, new RecordItemIndex(21));
            Validate.AttributeContains(repo.ApplicationUnderTest.ContactsLabelInfo, "InnerText", "Contacts");
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
